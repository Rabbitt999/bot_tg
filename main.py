import telebot
import json
import random
import os
import re
import time
from telebot import types
from datetime import datetime, timedelta, timezone

TOKEN = '7991439480:AAGR8KyC3RnBEVlYpP8-39ExcI-SSAhmPC0'
bot = telebot.TeleBot(TOKEN)

ADMIN_ID = 6974875043
CHANNEL_USERNAME = 'CodeMovie1'
MOVIES_FILE = 'movies.json'
USERS_FILE = 'users.json'

user_states = {}
temp_data = {}
genre_search_data = {}
user_movie_history = {}
genre_movie_history = {}

def ensure_file_exists(filename, default):
    if not os.path.exists(filename):
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(default, f)

def load_movies():
    ensure_file_exists(MOVIES_FILE, [])
    with open(MOVIES_FILE, 'r', encoding='utf-8') as f:
        return json.load(f)

def save_movies(movies):
    with open(MOVIES_FILE, 'w', encoding='utf-8') as f:
        json.dump(movies, f, ensure_ascii=False, indent=2)

def log_user(user_id):
    now = datetime.now(timezone.utc).isoformat()
    ensure_file_exists(USERS_FILE, {})
    try:
        with open(USERS_FILE, 'r', encoding='utf-8') as f:
            users = json.load(f)
    except:
        users = {}

    users[str(user_id)] = now

    cleaned_users = {}
    for uid, timestamp in users.items():
        try:
            if datetime.fromisoformat(timestamp) >= datetime.now(timezone.utc) - timedelta(days=7):
                cleaned_users[uid] = timestamp
        except:
            continue

    with open(USERS_FILE, 'w', encoding='utf-8') as f:
        json.dump(cleaned_users, f, ensure_ascii=False, indent=2)

def get_weekly_user_count():
    ensure_file_exists(USERS_FILE, {})
    with open(USERS_FILE, 'r', encoding='utf-8') as f:
        users = json.load(f)
    return len(users)

def check_subscription(user_id):
    try:
        member = bot.get_chat_member(f"@{CHANNEL_USERNAME}", user_id)
        return member.status in ["member", "creator", "administrator"]
    except:
        return False

def normalize_genre(text):
    return re.sub(r'[^a-zA-Z–∞-—è–ê-–Ø—ñ—ó–Ü–á—î–Ñ“ë“ê0-9\s]', '', text.lower().strip())

def split_genres(genre_text):
    parts = re.split(r'[/,;]+', genre_text)
    return [normalize_genre(p) for p in parts if p.strip() != '']

def send_main_menu(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row('üîç –ü–æ—à—É–∫ —Ñ—ñ–ª—å–º—É –∑–∞ –∫–æ–¥–æ–º')
    markup.row('üé≤ –í–∏–ø–∞–¥–∫–æ–≤–∏–π —Ñ—ñ–ª—å–º', 'üé¨ –ü–æ—à—É–∫ –∑–∞ –∂–∞–Ω—Ä–æ–º')
    if str(chat_id) == str(ADMIN_ID):
        markup.row('–ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å')
    markup.row('‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–æ—Ç–∞')
    bot.send_message(chat_id, '–û–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é –∑ –º–µ–Ω—é:', reply_markup=markup)

def send_admin_panel(user_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row('‚ûï –î–æ–¥–∞—Ç–∏ —Ñ—ñ–ª—å–º', '‚ûñ –í–∏–¥–∞–ª–∏—Ç–∏ —Ñ—ñ–ª—å–º')
    markup.row('‚ûï –î–æ–¥–∞—Ç–∏ –∞–¥–º—ñ–Ω–∞', '‚ûñ –í–∏–¥–∞–ª–∏—Ç–∏ –∞–¥–º—ñ–Ω–∞')
    markup.row('üëë –°–ø–∏—Å–æ–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤')
    markup.row('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞')
    markup.row('‚óÄÔ∏è –ù–∞–∑–∞–¥')
    bot.send_message(user_id, '–ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å:', reply_markup=markup)

@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    if not check_subscription(user_id):
        markup = types.InlineKeyboardMarkup()
        btn = types.InlineKeyboardButton('–ü—ñ–¥–ø–∏—Å–∞—Ç–∏—Å—è', url=f'https://t.me/{CHANNEL_USERNAME}')
        markup.add(btn)
        bot.send_message(message.chat.id, '–©–æ–± –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ç–∏—Å—è –±–æ—Ç–æ–º, –ø—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª:', reply_markup=markup)
        return
    log_user(user_id)
    send_main_menu(message.chat.id)

def show_more_genre_movies(user_id, genre_input):
    # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é –¥–ª—è –∂–∞–Ω—Ä—É, —è–∫—â–æ —ó—ó —â–µ –Ω–µ–º–∞—î
    if genre_input not in genre_movie_history:
        genre_movie_history[genre_input] = []
    
    movies = load_movies()
    found_movies = []
    
    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ —Ñ—ñ–ª—å–º–∏ —Ü—å–æ–≥–æ –∂–∞–Ω—Ä—É
    for m in movies:
        if isinstance(m, dict):  # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —â–æ m —î —Å–ª–æ–≤–Ω–∏–∫–æ–º
            movie_genres = m.get('genre', '')
            genres_list = split_genres(movie_genres)
            if genre_input in genres_list:
                found_movies.append(m)
    
    if not found_movies:
        bot.send_message(user_id, '–§—ñ–ª—å–º–∏ —Ü—å–æ–≥–æ –∂–∞–Ω—Ä—É –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ.')
        send_main_menu(user_id)
        return
    
    # –Ø–∫—â–æ –≤—Å—ñ —Ñ—ñ–ª—å–º–∏ –≤–∂–µ –±—É–ª–∏ –ø–æ–∫–∞–∑–∞–Ω—ñ, —Å–∫–∏–¥–∞—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é
    if len(genre_movie_history[genre_input]) >= len(found_movies):
        genre_movie_history[genre_input] = []
    
    # –í–∏–±–∏—Ä–∞—î–º–æ —Ñ—ñ–ª—å–º–∏, —è–∫—ñ —â–µ –Ω–µ –ø–æ–∫–∞–∑—É–≤–∞–ª–∏—Å—è
    available_movies = [m for m in found_movies if m['code'] not in genre_movie_history[genre_input]]
    
    # –Ø–∫—â–æ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ñ—ñ–ª—å–º—ñ–≤ –º–µ–Ω—à–µ 3, –¥–æ–¥–∞—î–º–æ –¥–µ—è–∫—ñ –∑ —ñ—Å—Ç–æ—Ä—ñ—ó
    if len(available_movies) < 3 and len(found_movies) > 3:
        # –ë–µ—Ä–µ–º–æ –≤–∏–ø–∞–¥–∫–æ–≤—ñ —Ñ—ñ–ª—å–º–∏ –∑ —ñ—Å—Ç–æ—Ä—ñ—ó
        num_needed = min(3 - len(available_movies), len(found_movies))
        recently_shown = random.sample(genre_movie_history[genre_input], num_needed)
        available_movies.extend([m for m in found_movies if m['code'] in recently_shown])
    
    # –û–±–º–µ–∂—É—î–º–æ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ñ—ñ–ª—å–º—ñ–≤ –¥–æ 3
    movies_to_show = available_movies[:3] if available_movies else found_movies[:3]
    
    for movie in movies_to_show:
        try:
            if 'poster' in movie and movie['poster']:
                bot.send_photo(user_id, movie['poster'], caption=format_movie(movie), parse_mode='Markdown')
            else:
                bot.send_message(user_id, format_movie(movie), parse_mode='Markdown')
            time.sleep(1)
            
            # –î–æ–¥–∞—î–º–æ —Ñ—ñ–ª—å–º –¥–æ —ñ—Å—Ç–æ—Ä—ñ—ó –ø–æ–∫–∞–∑—É –¥–ª—è —Ü—å–æ–≥–æ –∂–∞–Ω—Ä—É
            if movie['code'] not in genre_movie_history[genre_input]:
                genre_movie_history[genre_input].append(movie['code'])
        except Exception as e:
            print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —Ñ—ñ–ª—å–º—É: {e}")
            continue
    
    send_main_menu(user_id)

@bot.message_handler(func=lambda message: True, content_types=['text', 'photo'])
def handle_message(message):
    user_id = message.from_user.id
    text = message.text.strip() if message.text else ""

    if not check_subscription(user_id):
        bot.send_message(user_id, '–°–ø–æ—á–∞—Ç–∫—É –ø—ñ–¥–ø–∏—à—ñ—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª.')
        return

    if user_id in user_states:
        handle_state(message)
        return

    if text == 'üîç –ü–æ—à—É–∫ —Ñ—ñ–ª—å–º—É –∑–∞ –∫–æ–¥–æ–º':
        bot.send_message(user_id, '–í–≤–µ–¥—ñ—Ç—å –∫–æ–¥ —Ñ—ñ–ª—å–º—É:')
        user_states[user_id] = 'awaiting_code'

    elif text == 'üé≤ –í–∏–ø–∞–¥–∫–æ–≤–∏–π —Ñ—ñ–ª—å–º':
        movies = load_movies()
        if not movies:
            bot.send_message(user_id, '–ë–∞–∑–∞ —Ñ—ñ–ª—å–º—ñ–≤ –ø–æ—Ä–æ–∂–Ω—è.')
            return

        if user_id not in user_movie_history:
            user_movie_history[user_id] = []

        available_movies = [m for m in movies if isinstance(m, dict) and m['code'] not in user_movie_history[user_id]]

        if not available_movies:
            available_movies = movies
            user_movie_history[user_id] = []

        if available_movies:
            movie = random.choice(available_movies)
            user_movie_history[user_id].append(movie['code'])
            
            try:
                if 'poster' in movie and movie['poster']:
                    bot.send_photo(user_id, movie['poster'], caption=format_movie(movie), parse_mode='Markdown')
                else:
                    bot.send_message(user_id, format_movie(movie), parse_mode='Markdown')
            except Exception as e:
                print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —Ñ—ñ–ª—å–º—É: {e}")
                bot.send_message(user_id, '–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —Ñ—ñ–ª—å–º—É.')
        else:
            bot.send_message(user_id, '–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ —Ñ—ñ–ª—å–º.')

    elif text == 'üé¨ –ü–æ—à—É–∫ –∑–∞ –∂–∞–Ω—Ä–æ–º':
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        genres = ['"üé≠"–î—Ä–∞–º–∞', '"üòÇ"–ö–æ–º–µ–¥—ñ—è', '"üî´"–ë–æ–π–æ–≤–∏–∫', '"üî•"–ï–∫—à–Ω', '"üïµÔ∏è‚Äç‚ôÇÔ∏è"–¢—Ä–∏–ª–µ—Ä', '"üëª"–ñ–∞—Ö–∏', '"üõ∏"–ü—Ä–∏–≥–æ–¥–∏', '"ü§ñ"–§–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞',]
        for i in range(0, len(genres), 3):
            markup.row(*genres[i:i+3])
        markup.row('‚óÄÔ∏è –ù–∞–∑–∞–¥')
        bot.send_message(user_id, '–û–±–µ—Ä—ñ—Ç—å –∂–∞–Ω—Ä:', reply_markup=markup)
        user_states[user_id] = 'awaiting_genre'

    elif text == '‚óÄÔ∏è –ù–∞–∑–∞–¥':
        send_main_menu(user_id)
        user_states.pop(user_id, None)
        if user_id in genre_search_data:
            del genre_search_data[user_id]

    elif text == '–ê–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å' and str(user_id) == str(ADMIN_ID):
        send_admin_panel(user_id)

    elif text == 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞' and str(user_id) == str(ADMIN_ID):
        count = get_weekly_user_count()
        bot.send_message(user_id, f'–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ 7 –¥–Ω—ñ–≤: {count}')

    elif text == '‚ûï –î–æ–¥–∞—Ç–∏ —Ñ—ñ–ª—å–º' and str(user_id) == str(ADMIN_ID):
        temp_data[user_id] = {}
        user_states[user_id] = 'add_code'
        bot.send_message(user_id, '–í–≤–µ–¥—ñ—Ç—å –∫–æ–¥ —Ñ—ñ–ª—å–º—É:')

    elif text == '‚ûñ –í–∏–¥–∞–ª–∏—Ç–∏ —Ñ—ñ–ª—å–º' and str(user_id) == str(ADMIN_ID):
        user_states[user_id] = 'delete_code'
        bot.send_message(user_id, '–í–≤–µ–¥—ñ—Ç—å –∫–æ–¥ —Ñ—ñ–ª—å–º—É –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è:')

    elif text == '‚ûï –î–æ–¥–∞—Ç–∏ –∞–¥–º—ñ–Ω–∞' and str(user_id) == str(ADMIN_ID):
        user_states[user_id] = 'add_admin'
        bot.send_message(user_id, '–í–≤–µ–¥—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–æ–≥–æ —Ö–æ—á–µ—Ç–µ –¥–æ–¥–∞—Ç–∏ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:')

    elif text == '‚ûñ –í–∏–¥–∞–ª–∏—Ç–∏ –∞–¥–º—ñ–Ω–∞' and str(user_id) == str(ADMIN_ID):
        user_states[user_id] = 'remove_admin'
        bot.send_message(user_id, '–í–≤–µ–¥—ñ—Ç—å ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞, —è–∫–æ–≥–æ —Ö–æ—á–µ—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤:')

    elif text == 'üëë –°–ø–∏—Å–æ–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤' and str(user_id) == str(ADMIN_ID):
        admins = load_admins()
        if admins:
            admin_list = '\n'.join(str(a) for a in admins)
            bot.send_message(user_id, f'–°–ø–∏—Å–æ–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤:\n{admin_list}')
        else:
            bot.send_message(user_id, '–°–ø–∏—Å–æ–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤ –ø–æ—Ä–æ–∂–Ω—ñ–π.')

    elif text == '‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –±–æ—Ç–∞':
        info = (
            "‚ÑπÔ∏è –ü—Ä–æ –±–æ—Ç–∞\n\n"
            "üîç –ü–æ—à—É–∫ —Ñ—ñ–ª—å–º—É –∑–∞ –∫–æ–¥–æ–º ‚Äî –≤–≤–µ–¥–∏ –∫–æ–¥ —ñ–∑ TikTok, —â–æ–± –¥—ñ–∑–Ω–∞—Ç–∏—Å—è –Ω–∞–∑–≤—É —Ñ—ñ–ª—å–º—É.\n"
            "üé≤ –í–∏–ø–∞–¥–∫–æ–≤–∏–π —Ñ—ñ–ª—å–º ‚Äî –±–æ—Ç –≤–∏–ø–∞–¥–∫–æ–≤–æ –Ω–∞–¥—ñ—à–ª–µ —Ç–æ–±—ñ —Ñ—ñ–ª—å–º —ñ–∑ –±–∞–∑–∏.\n"
            "üé¨ –ü–æ—à—É–∫ –∑–∞ –∂–∞–Ω—Ä–æ–º ‚Äî –æ–±–µ—Ä–∏ –∂–∞–Ω—Ä, —â–æ–± –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –¥–æ–±—ñ—Ä–∫—É —Ñ—ñ–ª—å–º—ñ–≤."
        )
        bot.send_message(user_id, info, parse_mode='Markdown')

    else:
        bot.send_message(user_id, '–ù–µ–≤—ñ–¥–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞. –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é –∑ –º–µ–Ω—é.')

def handle_state(message):
    user_id = message.from_user.id
    text = message.text.strip() if message.text else ""
    state = user_states.get(user_id)

    if state == 'awaiting_code':
        movies = load_movies()
        found = next((m for m in movies if isinstance(m, dict) and m['code'] == text), None)
        if found:
            try:
                if 'poster' in found and found['poster']:
                    bot.send_photo(user_id, found['poster'], caption=format_movie(found), parse_mode='Markdown')
                else:
                    bot.send_message(user_id, format_movie(found), parse_mode='Markdown')
            except Exception as e:
                print(f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —Ñ—ñ–ª—å–º—É: {e}")
                bot.send_message(user_id, '–°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤—ñ–¥–ø—Ä–∞–≤—Ü—ñ —Ñ—ñ–ª—å–º—É.')
        else:
            bot.send_message(user_id, '–§—ñ–ª—å–º –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.')
        user_states.pop(user_id, None)
        send_main_menu(user_id)

    elif state == 'awaiting_genre':
        genre_input = normalize_genre(text)
        show_more_genre_movies(user_id, genre_input)
        user_states.pop(user_id, None)

    elif state == 'add_code':
        temp_data[user_id]['code'] = text
        user_states[user_id] = 'add_title'
        bot.send_message(user_id, '–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É —Ñ—ñ–ª—å–º—É:')

    elif state == 'add_title':
        temp_data[user_id]['title'] = text
        user_states[user_id] = 'add_rating'
        bot.send_message(user_id, '–í–≤–µ–¥—ñ—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ IMDb:')

    elif state == 'add_rating':
        temp_data[user_id]['rating'] = text
        user_states[user_id] = 'add_duration'
        bot.send_message(user_id, '–í–≤–µ–¥—ñ—Ç—å —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å:')

    elif state == 'add_duration':
        temp_data[user_id]['duration'] = text
        user_states[user_id] = 'add_year'
        bot.send_message(user_id, '–í–≤–µ–¥—ñ—Ç—å —Ä—ñ–∫:')

    elif state == 'add_year':
        temp_data[user_id]['year'] = text
        user_states[user_id] = 'add_age_category'
        bot.send_message(user_id, '–í–≤–µ–¥—ñ—Ç—å –≤—ñ–∫–æ–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, 16+):')

    elif state == 'add_age_category':
        temp_data[user_id]['age_category'] = text
        user_states[user_id] = 'add_country'
        bot.send_message(user_id, '–í–≤–µ–¥—ñ—Ç—å –∫—Ä–∞—ó–Ω—É:')

    elif state == 'add_country':
        temp_data[user_id]['country'] = text
        user_states[user_id] = 'add_genre'
        bot.send_message(user_id, '–í–≤–µ–¥—ñ—Ç—å –∂–∞–Ω—Ä (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥, –ï–∫—à–Ω/–ü—Ä–∏–≥–æ–¥–∏):')

    elif state == 'add_genre':
        temp_data[user_id]['genre'] = text
        user_states[user_id] = 'add_megogo_link'
        bot.send_message(user_id, '–í–≤–µ–¥—ñ—Ç—å –ø–∞—Ä—Ç–Ω–µ—Ä—Å—å–∫–µ –ø–æ—Å–∏–ª–∞–Ω–Ω—è –Ω–∞ Megogo (–∞–±–æ –∫—Ä–∞–ø–∫—É "." —â–æ–± –ø—Ä–æ–ø—É—Å—Ç–∏—Ç–∏):')

    elif state == 'add_megogo_link':
        if text != '.':
            temp_data[user_id]['megogo_link'] = text
        user_states[user_id] = 'add_poster'
        bot.send_message(user_id, '–ù–∞–¥—ñ—à–ª—ñ—Ç—å –ø–æ—Å—Ç–µ—Ä —Ñ—ñ–ª—å–º—É —è–∫ —Ñ–æ—Ç–æ:')

    elif state == 'add_poster' and message.photo:
        file_id = message.photo[-1].file_id
        temp_data[user_id]['poster'] = file_id
        movie = temp_data.pop(user_id)
        movies = load_movies()
        movies.append(movie)
        save_movies(movies)
        bot.send_message(user_id, '–§—ñ–ª—å–º –¥–æ–¥–∞–Ω–æ!')
        user_states.pop(user_id)

    elif state == 'delete_code':
        code = text
        movies = load_movies()
        movies = [m for m in movies if isinstance(m, dict) and m['code'] != code]
        save_movies(movies)
        bot.send_message(user_id, '–§—ñ–ª—å–º –≤–∏–¥–∞–ª–µ–Ω–æ (—è–∫—â–æ —ñ—Å–Ω—É–≤–∞–≤).')
        user_states.pop(user_id)

    elif state == 'add_admin':
        try:
            new_admin_id = int(text)
            admins = load_admins()
            if new_admin_id not in admins:
                admins.append(new_admin_id)
                save_admins(admins)
                bot.send_message(user_id, f'–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {new_admin_id} –¥–æ–¥–∞–Ω–∏–π —è–∫ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä.')
            else:
                bot.send_message(user_id, '–¶–µ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∂–µ —î –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.')
        except:
            bot.send_message(user_id, '–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID.')
        user_states.pop(user_id)

    elif state == 'remove_admin':
        try:
            rem_admin_id = int(text)
            admins = load_admins()
            if rem_admin_id in admins:
                admins.remove(rem_admin_id)
                save_admins(admins)
                bot.send_message(user_id, f'–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á {rem_admin_id} –≤–∏–¥–∞–ª–µ–Ω–∏–π –∑ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤.')
            else:
                bot.send_message(user_id, '–¶—å–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ–º–∞—î —Å–µ—Ä–µ–¥ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—ñ–≤.')
        except:
            bot.send_message(user_id, '–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π ID.')
        user_states.pop(user_id)

def format_movie(movie):
    if not isinstance(movie, dict):
        return "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Ñ—ñ–ª—å–º—É"
    
    caption = (f"üé¨ {movie.get('title', '–ù–µ–≤—ñ–¥–æ–º–æ')}\n"
              f"‚≠ê IMDb: {movie.get('rating', '–ù–µ–≤—ñ–¥–æ–º–æ')}\n"
              f"‚è± –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: {movie.get('duration', '–ù–µ–≤—ñ–¥–æ–º–æ')}\n"
              f"üìÖ –†—ñ–∫: {movie.get('year', '–ù–µ–≤—ñ–¥–æ–º–æ')}\n"
              f"üîû –í—ñ–∫: {movie.get('age_category', '–ù–µ –≤–∫–∞–∑–∞–Ω–æ')}\n"
              f"üåç –ö—Ä–∞—ó–Ω–∞: {movie.get('country', '–ù–µ–≤—ñ–¥–æ–º–æ')}\n"
              f"üé≠ –ñ–∞–Ω—Ä: {movie.get('genre', '–ù–µ–≤—ñ–¥–æ–º–æ')}\n"
              f"#–ö–æ–¥: {movie.get('code', '–ù–µ–≤—ñ–¥–æ–º–æ')}")
    
    if 'megogo_link' in movie:
        caption += f"\n\nüîó –î–∏–≤–∏—Ç–∏—Å—è –Ω–∞ Megogo: {movie['megogo_link']}"
    
    return caption

def load_admins():
    filename = 'admins.json'
    if not os.path.exists(filename):
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump([ADMIN_ID], f)
    with open(filename, 'r', encoding='utf-8') as f:
        return json.load(f)

def save_admins(admins):
    filename = 'admins.json'
    with open(filename, 'w', encoding='utf-8') as f:
        json.dump(admins, f, ensure_ascii=False, indent=2)

bot.polling(none_stop=True)
